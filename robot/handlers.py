import os
import sys
from aiogram import Dispatcher, types
import keyboards
import database
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.callback_data import CallbackData
import aiohttp
import random
import logging
import time
import json

logging.basicConfig(level=logging.INFO)

class ReplenishBalanceStates(StatesGroup):
    enter_amount = State()
    choose_method = State()
    choose_payment_method = State()

class CaptchaState(StatesGroup):
    input = State()

async def update_crypto_rates():
    global btc_price, ltc_price
    url = 'https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,litecoin&vs_currencies=rub'
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            data = await response.json()
            btc_price = data['bitcoin']['rub']
            ltc_price = data['litecoin']['rub']

async def periodic_crypto_update():
    while True:
        await update_crypto_rates()
        await asyncio.sleep(900)  

async def show_categories(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_inline_keyboard())
    
def get_inline_keyboard():
    markup = InlineKeyboardMarkup(row_width=1)
    cities = database.get_cities()
    city_buttons = [InlineKeyboardButton(city[1], callback_data=f"city_{city[0]}") for city in cities]
    
    for i in range(0, len(city_buttons), 2):
        buttons_to_add = city_buttons[i:i+2]
        markup.row(*buttons_to_add)

    operator_url = database.get_operator_link()
    help_url = database.get_help_text()
    work_url = database.get_work_link()
    site_url = "https://telegram.org/"
    
    markup.add(InlineKeyboardButton("–ë–∞–ª–∞–Ω—Å (0 —Ä—É–±.)", callback_data="balance"))
    markup.add(InlineKeyboardButton("–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑", callback_data="last_order"))
    markup.add(InlineKeyboardButton("‚ú®–°–ê–ü–û–†–¢‚ú®", url=help_url))
    markup.add(InlineKeyboardButton("üí•–û–ü–ï–†–ê–¢–û–†", url=operator_url))
    markup.add(InlineKeyboardButton("üöÄ–†–ê–ë–û–¢–êüöÄ", url=work_url))
    markup.add(InlineKeyboardButton("üí•–ù–∞—à —Å–∞–π—Çüí•", url=site_url))
    return markup

def correct_minute_form(minutes):
    if 10 <= minutes % 100 <= 20:
        return '–º–∏–Ω—É—Ç'
    elif minutes % 10 == 1:
        return '–º–∏–Ω—É—Ç—É'
    elif 2 <= minutes % 10 <= 4:
        return '–º–∏–Ω—É—Ç—ã'
    else:
        return '–º–∏–Ω—É—Ç'

async def send_random_captcha(message: types.Message, state: FSMContext):
    captcha_dir = 'captcha'
    captcha_files = [f for f in os.listdir(captcha_dir) if f.endswith('.jpg')]
    
    if not captcha_files:
        await message.answer("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª—ã –∫–∞–ø—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    captcha_file = random.choice(captcha_files)
    captcha_path = os.path.join(captcha_dir, captcha_file)

    with open(captcha_path, 'rb') as photo:
        await message.answer_photo(
            photo=photo, 
            caption=f"–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–µ—à–∏—Ç–µ –∫–∞–ø—á—É —Å —Ü–∏—Ñ—Ä–∞–º–∏ –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—ã —á–µ–ª–æ–≤–µ–∫."
        )
        async with state.proxy() as data:
            data['captcha_answer'] = captcha_file.rstrip('.jpg')

btc_price = 0
ltc_price = 0

async def register_handlers(dp: Dispatcher, bot_token):
    @dp.message_handler(commands=['start'], state="*")
    async def cmd_start(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        if not database.check_user_exists(user_id, bot_token):
            await CaptchaState.input.set()
            await send_random_captcha(message, state)
        else:
            await state.finish()
            await message.answer("–ü—Ä–∏–≤–µ—Ç", reply_markup=keyboards.main_keyboard())
            await show_categories(message)
    
    @dp.message_handler(state=CaptchaState.input)
    async def handle_captcha_input(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            correct_answer = data.get('captcha_answer')
        
        if message.text == correct_answer:
            user_id = message.from_user.id
            database.add_user(user_id, bot_token)  
            await state.finish()
            await message.answer("–ü—Ä–∏–≤–µ—Ç", reply_markup=keyboards.main_keyboard())
            await show_categories(message)
        else:
            await send_random_captcha(message, state)

    @dp.message_handler(lambda message: message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", state="*")
    async def handle_main_menu(message: types.Message, state: FSMContext):
        await show_categories(message)

    @dp.callback_query_handler(lambda c: c.data == 'last_order')
    async def handle_last_order(callback_query: types.CallbackQuery):
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤", show_alert=True)
    
    @dp.callback_query_handler(lambda c: c.data == 'balance')
    async def initiate_replenish_balance(callback_query: types.CallbackQuery):
        await callback_query.answer()
        await ReplenishBalanceStates.enter_amount.set()
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å:")
    
    
    @dp.message_handler(state=ReplenishBalanceStates.enter_amount)
    async def enter_replenish_amount(message: types.Message, state: FSMContext):
        if not message.text.isdigit() or int(message.text) < 1000:
            await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–µ –º–µ–Ω–µ–µ 1000 —Ä—É–±–ª–µ–π).")
        else:
            await state.update_data(amount=int(message.text))
            await ReplenishBalanceStates.choose_payment_method.set()
            inline_kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–û–ø–ª–∞—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç—Éüí≥", callback_data="method_card"))
            inline_kb.add(InlineKeyboardButton("Bitcoin", callback_data="method_btc"))
            inline_kb.add(InlineKeyboardButton("Litecoin", callback_data="method_ltc"))
            await message.answer("–ß–µ–º –≤—ã –±—É–¥–µ—Ç–µ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å:", reply_markup=inline_kb)
    
    
    @dp.callback_query_handler(state=ReplenishBalanceStates.choose_payment_method)
    async def choose_payment_method(callback_query: types.CallbackQuery, state: FSMContext):
        payment_method = callback_query.data.split('_')[1]
        await state.update_data(payment_method=payment_method)
    
        user_data = await state.get_data()
        amount = int(user_data['amount'])
        order_number = ''.join([str(random.randint(0, 9)) for _ in range(8)])
    
        if payment_method in ['btc', 'ltc']:
            
            payment_details = database.get_payment_details(payment_method)
            final_amount = calculate_final_amount(amount, payment_method)
            currency = payment_method.upper()
            await callback_query.message.answer(
                f"–û–ø–ª–∞—Ç–∏—Ç–µ <b>{final_amount}</b> {currency} –Ω–∞ –∞–¥—Ä–µ—Å <b>{payment_details}</b>",
                parse_mode='HTML'
            )
        else:
            
            card_details = database.get_payment_details('card')
            await callback_query.message.answer(text=get_payment_instructions(order_number, amount), parse_mode='HTML')
            await callback_query.message.answer(
                f"–ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É ‚Ññ {order_number}. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É <b>{amount}</b> —Ä—É–±–ª–µ–π —É–¥–æ–±–Ω—ã–º –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–±–æ–º. –í–∞–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Ä–æ–≤–Ω—É—é —Å—É–º–º—É.\n<b>{card_details}</b>\n‚ÄºÔ∏è —ç—Ç–æ <b>–ù–ï –°–ë–ï–†–ë–ê–ù–ö!</b>\n‚ÄºÔ∏è —É –≤–∞—Å –µ—Å—Ç—å 30 –º–∏–Ω –Ω–∞ –æ–ø–ª–∞—Ç—É, –ø–æ—Å–ª–µ —á–µ–≥–æ –ø–ª–∞—Ç—ë–∂ –Ω–µ –±—É–¥–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω\n<b>‚ÄºÔ∏è –ü–ï–†–ï–í–Å–õ –ù–ï–¢–û–ß–ù–£–Æ –°–£–ú–ú–£ - –û–ü–õ–ê–¢–ò–õ –ß–£–ñ–û–ô –ó–ê–ö–ê–ó</b>",
                parse_mode='HTML'
            )
        current_time = time.time()
        payment_issue_callback_data = f"issue_{current_time}"
        await callback_query.message.answer(
            "–ï—Å–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ –≤—ã–¥–∞–ª–∏—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É - '–ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π'",
            reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("–ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π?", callback_data=payment_issue_callback_data))
        )
        await state.finish()
    @dp.callback_query_handler(lambda c: c.data.startswith('city_'))
    async def process_city_selection(callback_query: types.CallbackQuery):
        await callback_query.answer()
        city_id = int(callback_query.data.split('_')[1])
    
        products = database.get_products_by_city(city_id)
        markup = InlineKeyboardMarkup(row_width=1)
        for product in products:
            product_name = product[1]
            product_id = product[0]
            price = int(database.get_product_price(product_id))
            markup.add(InlineKeyboardButton(f"{product_name} ({price} —Ä—É–±.)", callback_data=f"product_{product_id}_{city_id}"))
        await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç", reply_markup=markup)
    
    @dp.callback_query_handler(lambda c: c.data.startswith('product_'))
    async def process_product_selection(callback_query: types.CallbackQuery):
        await callback_query.answer()
        product_id, city_id = map(int, callback_query.data.split('_')[1:])
    
        product_details = database.get_product_details(product_id)
        markup = InlineKeyboardMarkup(row_width=1)
        for detail in product_details:
            districts = detail[2].split(',')
            for district in districts:
                markup.add(InlineKeyboardButton(district, callback_data=f"district_{product_id}_{city_id}_{district}"))
    
        await callback_query.message.answer("–≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω", reply_markup=markup)
    @dp.callback_query_handler(lambda c: c.data.startswith('district_'))
    async def process_district_selection(callback_query: types.CallbackQuery):
        await callback_query.answer()
        _, product_id, city_id, district = callback_query.data.split('_')
    
        product_details = database.get_product_details(int(product_id))
        klad_types = set(detail[0] for detail in product_details)
        markup = InlineKeyboardMarkup(row_width=1)
        for klad_type in klad_types:
            markup.add(InlineKeyboardButton(klad_type, callback_data=f"kladtype_{product_id}_{city_id}_{district}_{klad_type}"))
    
        await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø", reply_markup=markup)
            
    @dp.callback_query_handler(lambda c: c.data.startswith('kladtype_'))
    async def process_kladtype_selection(callback_query: types.CallbackQuery):
        await callback_query.answer()
        _, product_id, city_id, district, klad_type = callback_query.data.split('_')
    
        
        product_id = int(product_id)
        city_id = int(city_id)
    
        
        product_name = database.get_product_name(product_id)
        city_name = database.get_city_name(city_id)
    
        
        order_number = ''.join([str(random.randint(0, 9)) for _ in range(8)])
    
        
        message_text = (
            f"–ù–æ–º–µ—Ä –ø–æ–∫—É–ø–∫–∏ ‚Ññ <b>{order_number}</b>\n"
            f"–ì–æ—Ä–æ–¥: {city_name}\n"
            f"–†–∞–π–æ–Ω(—Å—Ç–∞–Ω—Ü–∏—è): <b>{district}</b>\n"
            f"–¢–æ–≤–∞—Ä –∏ –æ–±—ä–µ–º: <b>{product_name} ({klad_type})</b>\n"
            "–î–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–û–ü–õ–ê–¢–ò–¢–¨</b>\n"
            "–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –í—ã –Ω–∞–∂–º–µ—Ç–µ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã, —É –≤–∞—Å –µ—Å—Ç—å 30 –º–∏–Ω—É—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É"
        )
    
        
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"pay_{order_number}_{product_id}"))
        markup.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
    
        
        await callback_query.message.answer(message_text, reply_markup=markup, parse_mode="HTML")
    @dp.callback_query_handler(lambda c: c.data.startswith('pay_'))
    async def process_payment(callback_query: types.CallbackQuery):
        await callback_query.answer()
        _, order_number, product_id = callback_query.data.split('_')
        product_id = int(product_id)
        
        
        price = database.get_product_price(product_id)
    
        
        inline_kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–û–ø–ª–∞—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç—Éüí≥", callback_data=f"method_card_{order_number}_{price}"))
        inline_kb.add(InlineKeyboardButton("Bitcoin", callback_data=f"method_btc_{order_number}_{price}"))
        inline_kb.add(InlineKeyboardButton("Litecoin", callback_data=f"method_ltc_{order_number}_{price}"))
    
        await callback_query.message.answer("–í–∞—à –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å 0 —Ä—É–±..\n–ß–µ–º –≤—ã –±—É–¥–µ—Ç–µ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å?", reply_markup=inline_kb)
    @dp.callback_query_handler(lambda c: c.data.startswith('method_'))
    async def choose_payment_method(callback_query: types.CallbackQuery):
        await callback_query.answer()
        parts = callback_query.data.split('_')
        method = parts[1]
        order_number = parts[2]
        price = parts[3]
    
        
        price = float(price)  
    
        if method in ['btc', 'ltc']:
            
            payment_details = database.get_payment_details(method)
            final_amount = calculate_final_amount(price, method)
            currency = method.upper()
            await callback_query.message.answer(
                f"–û–ø–ª–∞—Ç–∏—Ç–µ <b>{final_amount}</b> {currency} –Ω–∞ –∞–¥—Ä–µ—Å <b>{payment_details}</b>\n"
                f"–ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É ‚Ññ {order_number}.",
                parse_mode='HTML'
            )
        else:
            
            card_details = database.get_payment_details('card')

            price = int(float(price))

            
            payment_instructions = get_payment_instructions(order_number, price)
            await callback_query.message.answer(payment_instructions, parse_mode='HTML')
    
            
            await callback_query.message.answer(
                f"–ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É ‚Ññ {order_number}. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É <b>{price}</b> —Ä—É–±–ª–µ–π —É–¥–æ–±–Ω—ã–º –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–±–æ–º.\n"
                f"<b>{card_details}</b>\n‚ÄºÔ∏è —ç—Ç–æ <b>–ù–ï –°–ë–ï–†–ë–ê–ù–ö!</b>\n"
                f"‚ÄºÔ∏è —É –≤–∞—Å –µ—Å—Ç—å 30 –º–∏–Ω –Ω–∞ –æ–ø–ª–∞—Ç—É, –ø–æ—Å–ª–µ —á–µ–≥–æ –ø–ª–∞—Ç—ë–∂ –Ω–µ –±—É–¥–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω\n"
                f"<b>‚ÄºÔ∏è –ü–ï–†–ï–í–Å–õ –ù–ï–¢–û–ß–ù–£–Æ –°–£–ú–ú–£ - –û–ü–õ–ê–¢–ò–õ –ß–£–ñ–û–ô –ó–ê–ö–ê–ó</b>",
                parse_mode='HTML'
            )
    
            
            current_time = time.time()
            payment_issue_callback_data = f"issue_{current_time}"
            await callback_query.message.answer(
                "–ï—Å–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ –≤—ã–¥–∞–ª–∏—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É - '–ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π'",
                reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("–ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π?", callback_data=payment_issue_callback_data))
            )
    @dp.callback_query_handler(lambda c: c.data == 'cancel', state="*")
    async def handle_cancel(callback_query: types.CallbackQuery, state: FSMContext):
        await callback_query.answer()
        await state.finish()
        
        await show_categories(callback_query.message)
    @dp.callback_query_handler(lambda c: c.data.startswith('issue_'))
    async def issue(callback_query: types.CallbackQuery):
        parts = callback_query.data.split('_')
        issue_time = float(parts[1])  
    
        current_time = time.time()
        if current_time - issue_time < 1800:  
            time_left = int((1800 - (current_time - issue_time)) / 60)  
            minute_form = correct_minute_form(time_left)
            await callback_query.answer(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {time_left} {minute_form} –∏ –≤ —Å–ª—É—á–∞–µ –Ω–µ–ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –µ—â–µ —Ä–∞–∑.", show_alert=True)
        else:
            await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–Ω–æ–π –æ–ø–ª–∞—Ç—ã")

 
def calculate_final_amount(amount, payment_method):
    amount = float(amount)
    if payment_method == 'card':
        return amount  
    elif payment_method == 'btc':
        return round(amount / btc_price, 8)  
    elif payment_method == 'ltc':
        return round(amount / ltc_price, 5)  

def get_payment_instructions(order_number, amount):
    instructions = (
        f"‚úÖ –í–´–î–ê–ù–ù–´–ï –†–ï–ö–í–ò–ó–ò–¢–´ –î–ï–ô–°–¢–í–£–Æ–¢ 30 –ú–ò–ù–£–¢\n"
        f"‚úÖ –í–´ –ü–û–¢–ï–†–Ø–ï–¢–ï –î–ï–ù–¨–ì–ò, –ï–°–õ–ò –û–ü–õ–ê–¢–ò–¢–ï –ü–û–ó–ñ–ï\n"
        f"‚úÖ –ü–ï–†–ï–í–û–î–ò–¢–ï –¢–û–ß–ù–£–Æ –°–£–ú–ú–£. –ù–ï–í–ï–†–ù–ê–Ø –°–£–ú–ú–ê –ù–ï –ë–£–î–ï–¢ –ó–ê–ß–ò–°–õ–ï–ù–ê.\n"
        f"‚úÖ –û–ü–õ–ê–¢–ê –î–û–õ–ñ–ù–ê –ü–†–û–•–û–î–ò–¢–¨ –û–î–ù–ò–ú –ü–õ–ê–¢–ï–ñ–û–ú.\n"
        f"‚úÖ –ü–†–û–ë–õ–ï–ú–´ –° –û–ü–õ–ê–¢–û–ô? –ü–ï–†–ï–ô–î–ò–¢–ï –ü–û –°–°–´–õ–ö–ï : <a href='http://ut2.guru/doctor'>doctor</a>\n"
        f"–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ –∏\n"
        f"ID:  <b>{order_number}</b>\n"
        f"‚úÖ –° –ü–†–û–ë–õ–ï–ú–ù–û–ô –ó–ê–Ø–í–ö–û–ô –û–ë–†–ê–©–ê–ô–¢–ï–°–¨ –ù–ï –ü–û–ó–î–ù–ï–ï 24 –ß–ê–°–û–í –° –ú–û–ú–ï–ù–¢–ê –û–ü–õ–ê–¢–´."
    )
    return instructions
